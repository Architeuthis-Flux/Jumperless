// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------------ //
// spi_ch446_multi_cs //
// ------------------ //

#define spi_ch446_multi_cs_wrap_target 0
#define spi_ch446_multi_cs_wrap 9

#define spi_ch446_multi_cs_offset_entry_point 8u

static const uint16_t spi_ch446_multi_cs_program_instructions[] = {
            //     .wrap_target
    0x6201, //  0: out    pins, 1         side 0 [2] 
    0xb242, //  1: nop                    side 1 [2] 
    0x1040, //  2: jmp    x--, 0          side 1     
    0x7001, //  3: out    pins, 1         side 1     
    0xb022, //  4: mov    x, y            side 1     
    0xd000, //  5: irq    nowait 0        side 1     
    0x3050, //  6: wait   0 irq, 0 rel    side 1     
    0x00e0, //  7: jmp    !osre, 0        side 0     
    0x81e0, //  8: pull   ifempty block   side 0 [1] 
    0xa142, //  9: nop                    side 0 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_ch446_multi_cs_program = {
    .instructions = spi_ch446_multi_cs_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config spi_ch446_multi_cs_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_ch446_multi_cs_wrap_target, offset + spi_ch446_multi_cs_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

//#define MYNAMEISERIC 0 //on the board I sent to eric, the data and clock lines are bodged to GPIO 18 and 19. To allow for using hardware SPI
#include "hardware/gpio.h"
static inline void pio_spi_ch446_multi_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv, bool cpha, bool cpol,
        uint pin_sck, uint pin_mosi) {
    pio_sm_config c = spi_ch446_multi_cs_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_set_pins(&c, pin_mosi, 1);
    sm_config_set_sideset_pins(&c, pin_sck);
    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);
pio_sm_set_consecutive_pindirs	(pio, sm, pin_mosi, 2, true);
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_sck);
    //pio_set_irqn_source_enabled	(pio,0,pis_sm0_tx_fifo_not_full,true);
           // The reason for doing interrupt0 + sm:
        // IRQ sources are enabled per irq flag. Since the irq flag being set depends on the state
        // machine because of the "0 rel", we want to make sure we're enabling the correct interrupt
        // source for the state machine the program is loaded into. 
        pio_set_irq0_source_enabled(pio, (pio_interrupt_source)(pis_interrupt0 + sm), true);
        // Make sure the interrupt starts cleared. It should already be cleared, so this should
        // basically be a no-op. I call it defensive programming.
        pio_interrupt_clear(pio, sm);
        // Build the configuration for the state machine
//pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
irq_set_enabled(PIO0_IRQ_0, true);
    uint entry_point = prog_offs;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, n_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, n_bits - 2));
    pio_sm_set_enabled(pio, sm, true);
}

#endif
