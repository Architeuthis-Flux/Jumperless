;I'm just compiling this with the online pioasm compiler and then pasting the compiled code into spi.pio.h

;https://wokwi.com/tools/pioasm

;this is basically spi but it sets a system IRQ on the last bit to allow the chip select pulse to happen

;Eric, remember to set the MYNAMEISERIC define to 1 if you're using the board I sent you, otherwise set it to 0


.program spi_ch446_multi_cs
.side_set 1

.wrap_target
bitloop:

    out pins, 1        side 0x0 [2]
    
    nop                side 0x1 [2]

    jmp x-- bitloop    side 0x1


    out pins, 1        side 0x1

    mov x, y           side 0x1

    irq  0             side 0x1
    
    wait 0 irq 0 rel   side 0x1
    
    jmp !osre bitloop  side 0x0

public entry_point:                 ; Must set X,Y to n-2 before starting!


    pull ifempty       side 0x0 [1] ; Block with CSn high (minimum 2 cycles)
    
    nop                side 0x0 [1]; CSn front porch


.wrap

% c-sdk {

//#define MYNAMEISERIC 0 //on the board I sent to eric, the data and clock lines are bodged to GPIO 18 and 19. To allow for using hardware SPI

#include "hardware/gpio.h"

static inline void pio_spi_ch446_multi_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv, bool cpha, bool cpol,
        uint pin_sck, uint pin_mosi) {
    
    pio_sm_config c = spi_ch446_multi_cs_program_get_default_config(prog_offs);
    
    sm_config_set_out_pins(&c, pin_mosi, 1);

    sm_config_set_set_pins(&c, pin_mosi, 1);

    sm_config_set_sideset_pins(&c, pin_sck);

    sm_config_set_out_shift(&c, false, true, n_bits);
   
    sm_config_set_clkdiv(&c, clkdiv);
   
    

pio_sm_set_consecutive_pindirs	(pio, sm, pin_mosi, 2, true);


    pio_gpio_init(pio, pin_mosi);
 
    pio_gpio_init(pio, pin_sck);
    //pio_set_irqn_source_enabled	(pio,0,pis_sm0_tx_fifo_not_full,true);

           // The reason for doing interrupt0 + sm:
        // IRQ sources are enabled per irq flag. Since the irq flag being set depends on the state
        // machine because of the "0 rel", we want to make sure we're enabling the correct interrupt
        // source for the state machine the program is loaded into. 

        pio_set_irq0_source_enabled(pio, (pio_interrupt_source)(pis_interrupt0 + sm), true);

        // Make sure the interrupt starts cleared. It should already be cleared, so this should
        // basically be a no-op. I call it defensive programming.

        pio_interrupt_clear(pio, sm);

        // Build the configuration for the state machine

    

 
 


//pio_set_irq0_source_enabled(pio, pis_interrupt0, true);

irq_set_enabled(PIO0_IRQ_0, true);

    uint entry_point = prog_offs;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, n_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, n_bits - 2));
    pio_sm_set_enabled(pio, sm, true);
}
%}
/*
//this doesnt work, so instead Im using the PIO IRQ to set the CS pin
.program spi_ch446_cs_handler

;.word 0b00000000000000001
.wrap_target


setI:
    set pins, 1
    nop [3]
    set pins, 0
    jmp bitloop2
setJ:
    set pins, 2
    nop [3]
    set pins, 0
    jmp bitloop2
setK:
    set pins, 4
    nop [3]
    set pins, 0
    jmp bitloop2
setL:
    set pins, 8
    nop [3]
    set pins, 0
    jmp bitloop2

public entry_point: 
bitloop2:
 

    wait 1 irq 2 
    pull ifempty
    irq clear 2
    out pins, 8
    
    set pins, 31 
    nop [3]
    set pins, 0
    
    
    
    
    jmp bitloop2  


   

.wrap

% c-sdk {
#include "hardware/gpio.h"
static inline void pio_spi_ch446_cs_handler_init(PIO pio, uint smCS, uint prog_offs, float clkdiv, uint y, uint x, uint pin_cs_I, uint pin_cs_A) {
    
    pio_sm_config c = spi_ch446_cs_handler_program_get_default_config(prog_offs);
    
    sm_config_set_set_pins(&c, pin_cs_I, 4);

    sm_config_set_out_pins(&c, pin_cs_A, 8);

   
    sm_config_set_out_shift(&c, false, true, x);
   
    sm_config_set_clkdiv(&c, clkdiv);
   
    

    pio_sm_set_pindirs_with_mask (pio, smCS, 1, 0b000000000111100000111111111100000);
;pio_sm_set_consecutive_pindirs	(pio, smCS, pin_cs_I, 4, true);


gpio_set_outover(pin_cs_A, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+1, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+2, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+3, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+4, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+5, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+6, GPIO_OVERRIDE_INVERT);
gpio_set_outover(pin_cs_A+7, GPIO_OVERRIDE_INVERT);

    pio_gpio_init(pio, pin_cs_A);
    pio_gpio_init(pio, pin_cs_A + 1);
    pio_gpio_init(pio, pin_cs_A + 2);
    pio_gpio_init(pio, pin_cs_A + 3);
    pio_gpio_init(pio, pin_cs_A + 4);
    pio_gpio_init(pio, pin_cs_A + 5);
    pio_gpio_init(pio, pin_cs_A + 6);
    pio_gpio_init(pio, pin_cs_A + 7);

    
 
    
    pio_gpio_init(pio, pin_cs_I);
    pio_gpio_init(pio, pin_cs_I + 1);
    pio_gpio_init(pio, pin_cs_I + 2);
    pio_gpio_init(pio, pin_cs_I + 3);

pio_set_irq0_source_enabled(pio, pis_interrupt2, true);



    uint entry_point = prog_offs;
    pio_sm_init(pio, smCS, entry_point, &c);
    pio_sm_exec(pio, smCS, pio_encode_set(pio_x, x));
    pio_sm_exec(pio, smCS, pio_encode_set(pio_y, y));
    pio_sm_set_enabled(pio, smCS, true);
}
%}
*/